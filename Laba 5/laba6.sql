-- СОЗДАНИЕ ТАБЛИЦЫ "ПОЛЬЗОВАТЕЛИ"
CREATE  TABLE USERS (
USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
USERNAME NVARCHAR2(50) NOT NULL UNIQUE,
PASSWORD NVARCHAR2(50) NOT NULL,
EMAIL NVARCHAR2(100) NOT NULL UNIQUE,
DEVICE NVARCHAR2(50) NOT NULL,
ROLE NVARCHAR2(50) NOT NULL
);

-- Организация

-- СОЗДАНИЕ ТАБЛИЦЫ "ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ"
CREATE TABLE SOFTWARE (
SOFTWARE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
NAME NVARCHAR2(100) NOT NULL UNIQUE,
VERSION NVARCHAR2(50) NOT NULL,
VENDOR NVARCHAR2(100) NOT NULL,
LICENSE_TYPE NVARCHAR2(50) NOT NULL,
PreviousLevelID NUMBER REFERENCES SOFTWARE (SOFTWARE_ID)
);

-- СОЗДАНИЕ ТАБЛИЦЫ "ЛИЦЕНЗИИ"
CREATE TABLE LICENSES (
LICENSE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
SOFTWARE_ID INT NOT NULL,
USER_ID INT NOT NULL,
START_DATE DATE NOT NULL,
END_DATE DATE NOT NULL,
LICENSE_COST DECIMAL(10, 2) NOT NULL,
FOREIGN KEY (SOFTWARE_ID) REFERENCES SOFTWARE(SOFTWARE_ID),
FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);


-- Вставка данных в таблицу USERS
INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, DEVICE, ROLE) VALUES
('user1', 'password1', 'user1@example.com', 'PC' , 'admin');
INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, DEVICE, ROLE) VALUES
('user2', 'password2', 'user2@example.com', 'SMARTPHONE' ,'user');
INSERT INTO USERS (USERNAME, PASSWORD, EMAIL, DEVICE, ROLE) VALUES
('user3', 'password3', 'user3@example.com', 'PC' ,'user');

-- Вставка данных в таблицу SOFTWARE
INSERT INTO SOFTWARE (NAME, VERSION, VENDOR, LICENSE_TYPE) VALUES
('Microsoft Office', '2019', 'Microsoft', 'Perpetual');
INSERT INTO SOFTWARE (NAME, VERSION, VENDOR, LICENSE_TYPE) VALUES
('Adobe Photoshop', '2022', 'Adobe', 'Subscription');
INSERT INTO SOFTWARE (NAME, VERSION, VENDOR, LICENSE_TYPE) VALUES
('Autodesk AutoCAD', '2021', 'Autodesk', 'Perpetual');

-- Вставка данных в таблицу LICENSES
-- Предположим, что лицензии начинаются с 1 января 2024 года и заканчиваются 31 декабря 2024 года
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 2, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 3, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-03-31', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 3, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-03-31', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 3, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-01-31', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 3, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-01-31', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 2, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-01-31', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 2, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-02-29', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 2, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-03-29', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 3, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-04-29', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 3, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-04-30', 'YYYY-MM-DD'), 200.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(2, 2, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 140.00);


--1 ЗАДАНИЕ --

SELECT
    EXTRACT(YEAR FROM START_DATE) AS "Year",
    CASE
        WHEN EXTRACT(MONTH FROM START_DATE) = EXTRACT(MONTH FROM END_DATE) THEN EXTRACT(MONTH FROM START_DATE)
        ELSE EXTRACT(MONTH FROM START_DATE) + 1
    END AS "Month",
    SUM(
        CASE
            WHEN MONTHS_BETWEEN(END_DATE, START_DATE) >= 0 THEN
                CASE
                    WHEN EXTRACT(MONTH FROM START_DATE) = EXTRACT(MONTH FROM END_DATE) THEN LICENSE_COST
                    ELSE (NEXT_DAY(ADD_MONTHS(START_DATE,1),1) - START_DATE) / 30.0 * LICENSE_COST
                END
            ELSE 0
        END
    ) AS "MonthlyProfit",
    SUM(
        CASE
            WHEN MONTHS_BETWEEN(END_DATE, START_DATE) >= 0 THEN
                CASE
                    WHEN TRUNC(START_DATE, 'Q') = TRUNC(END_DATE, 'Q') THEN
                        CASE
                            WHEN EXTRACT(MONTH FROM START_DATE) = EXTRACT(MONTH FROM END_DATE) THEN LICENSE_COST
                            ELSE (NEXT_DAY(ADD_MONTHS(START_DATE,3),1) - START_DATE) / 30.0 * LICENSE_COST
                        END
                    ELSE
                        CASE
                            WHEN EXTRACT(MONTH FROM START_DATE) = 1 AND EXTRACT(MONTH FROM END_DATE) = 12 THEN
                                (NEXT_DAY(ADD_MONTHS(START_DATE,12),1) - START_DATE) / 30.0 * LICENSE_COST
                            ELSE
                                (NEXT_DAY(ADD_MONTHS(START_DATE,3),1) - START_DATE) / 30.0 * LICENSE_COST
                        END
                END
            ELSE 0
        END
    ) AS "QuarterlyProfit",
    SUM(
        CASE
            WHEN MONTHS_BETWEEN(END_DATE, START_DATE) >= 0 THEN
                CASE
                    WHEN EXTRACT(MONTH FROM START_DATE) = EXTRACT(MONTH FROM END_DATE) THEN
                        CASE
                            WHEN EXTRACT(MONTH FROM START_DATE) <= 6 THEN (NEXT_DAY(ADD_MONTHS(START_DATE,6),1) - START_DATE) / 30.0 * LICENSE_COST
                            ELSE ((NEXT_DAY(ADD_MONTHS(START_DATE,6),1) - START_DATE) / 30.0 + (NEXT_DAY(ADD_MONTHS(START_DATE,12),1) - ADD_MONTHS(START_DATE,6)) / 30.0) * LICENSE_COST
                        END
                    ELSE
                        CASE
                            WHEN EXTRACT(MONTH FROM START_DATE) <= 6 AND EXTRACT(MONTH FROM END_DATE) > 6 THEN
                                ((NEXT_DAY(ADD_MONTHS(START_DATE,6),1) - START_DATE) / 30.0 + (NEXT_DAY(ADD_MONTHS(START_DATE,12),1) - ADD_MONTHS(START_DATE,6)) / 30.0) * LICENSE_COST
                            ELSE
                                (NEXT_DAY(ADD_MONTHS(START_DATE,6),1) - START_DATE) / 30.0 * LICENSE_COST
                        END
                END
            ELSE 0
        END
    ) AS "HalfYearlyProfit",
    SUM(
        CASE
            WHEN MONTHS_BETWEEN(END_DATE, START_DATE) >= 0 THEN
                CASE
                    WHEN EXTRACT(MONTH FROM START_DATE) = 1 AND EXTRACT(MONTH FROM END_DATE) = 12 THEN
                        (NEXT_DAY(ADD_MONTHS(START_DATE,12),1) - START_DATE) / 30.0 * LICENSE_COST
                    ELSE
                        (NEXT_DAY(ADD_MONTHS(START_DATE,12),1) - START_DATE) / 30.0 * LICENSE_COST
                END
            ELSE 0
        END
    ) AS "YearlyProfit"
FROM
    LICENSES L
    INNER JOIN SOFTWARE S ON L.SOFTWARE_ID = S.SOFTWARE_ID
WHERE
    S.NAME = 'Microsoft Office'
GROUP BY
    EXTRACT(YEAR FROM START_DATE),
    CASE
        WHEN EXTRACT(MONTH FROM START_DATE) = EXTRACT(MONTH FROM END_DATE) THEN EXTRACT(MONTH FROM START_DATE)
        ELSE EXTRACT(MONTH FROM START_DATE) + 1
    END
ORDER BY
    "Year", "Month";

-- Задание 2
WITH LicenseStats AS (
    SELECT
        SOFTWARE_ID,
        COUNT(*) AS LicenseCount,
        SUM(LICENSE_COST) AS TotalCost
    FROM
        LICENSES
    WHERE
        START_DATE <= TO_DATE('2024-12-31', 'YYYY-MM-DD') AND END_DATE >= TO_DATE('2024-01-01', 'YYYY-MM-DD')
    GROUP BY
        SOFTWARE_ID
),
TotalStats AS (
    SELECT
        COUNT(*) AS TotalLicenseCount,
        SUM(LICENSE_COST) AS TotalLicenseCost
    FROM
        LICENSES
    WHERE
        START_DATE <= TO_DATE('2024-12-31', 'YYYY-MM-DD') AND END_DATE >= TO_DATE('2024-01-01', 'YYYY-MM-DD')
)
SELECT
    LS.SOFTWARE_ID,
    LS.LicenseCount,
    LS.TotalCost,
    (LS.LicenseCount * 100.0) / TS.TotalLicenseCount AS LicenseCountPercentage,
    (LS.TotalCost * 100.0) / TS.TotalLicenseCost AS TotalCostPercentage
FROM
    LicenseStats LS
JOIN
    TotalStats TS ON 1=1;

-- задание 3
WITH VendorLicenseCostRaw AS (
    SELECT
        S.VENDOR,
        ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), -1 * (ROWNUM - 1)) AS MonthStart,
        TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), -1 * (ROWNUM - 1)), 'MONTH') AS "Month",
        EXTRACT(YEAR FROM ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), -1 * (ROWNUM - 1))) AS "Year",
        NVL(SUM(L.LICENSE_COST), 0) AS MonthlyLicenseCost
    FROM
        SOFTWARE S
    LEFT JOIN
        LICENSES L ON S.SOFTWARE_ID = L.SOFTWARE_ID
                   AND L.START_DATE >= ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), -5)
                   AND L.END_DATE <= TRUNC(SYSDATE, 'MONTH')
    GROUP BY
        S.VENDOR, ADD_MONTHS(TRUNC(SYSDATE, 'MONTH'), -1 * (ROWNUM - 1))
)
SELECT
    VENDOR,
    "Month",
    "Year",
    MonthlyLicenseCost
FROM (

        VendorLicenseCostRaw
) InnerQuery
WHERE
    RowNum BETWEEN 1 AND 20;
-- задание 4
WITH UsageCount AS (
    SELECT
        S.NAME AS SoftwareName,
        U.DEVICE AS DeviceType,
        COUNT(*) AS UsageCount,
        RANK() OVER (PARTITION BY U.DEVICE ORDER BY COUNT(*) DESC) AS RankByUsageCount
    FROM
        LICENSES L
    INNER JOIN
        SOFTWARE S ON L.SOFTWARE_ID = S.SOFTWARE_ID
    INNER JOIN
        USERS U ON L.USER_ID = U.USER_ID
    GROUP BY
        S.NAME, U.DEVICE
)
SELECT
    UC.DeviceType,
    UC.SoftwareName AS MostUsedSoftware,
    UC.UsageCount
FROM
    UsageCount UC
WHERE
    UC.RankByUsageCount = 1
ORDER BY
    UC.DeviceType;

select  * from LICENSES;
DELETE FROM LICENSES
WHERE LICENSE_ID IN (
    SELECT LICENSE_ID
    FROM (
        SELECT LICENSE_ID,
               ROW_NUMBER() OVER (PARTITION BY SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST ORDER BY LICENSE_ID) AS row_num
        FROM LICENSES
    ) duplicates
    WHERE row_num > 1
);












