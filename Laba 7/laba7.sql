CREATE TABLE USERS (
    USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USERNAME NVARCHAR2(50) NOT NULL UNIQUE,
    PASSWORD NVARCHAR2(50) NOT NULL,
    EMAIL NVARCHAR2(100) NOT NULL UNIQUE,
    DEVICE NVARCHAR2(50) NOT NULL,
    ROLE NVARCHAR2(50) NOT NULL
);

CREATE TABLE SOFTWARE (
    SOFTWARE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME NVARCHAR2(100) NOT NULL UNIQUE,
    VERSION NVARCHAR2(50) NOT NULL,
    VENDOR NVARCHAR2(100) NOT NULL,
    LICENSE_TYPE NVARCHAR2(50) NOT NULL,
    PreviousLevelID NUMBER, -- Предполагается, что это ссылка на предыдущую версию ПО
    FOREIGN KEY (PreviousLevelID) REFERENCES SOFTWARE (SOFTWARE_ID)
);

CREATE TABLE LICENSES (
    LICENSE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SOFTWARE_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    LICENSE_COST DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (SOFTWARE_ID) REFERENCES SOFTWARE(SOFTWARE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE ROOM_CLASSES (
    CLASS_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CLASS_NAME NVARCHAR2(50) NOT NULL UNIQUE,
    USER_ID INT NOT NULL, -- Добавлено поле для связи с таблицей USERS
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE CLASS_HISTORY (
    HISTORY_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CLASS_ID INTEGER NOT NULL,
    NEW_CLASS_NAME NVARCHAR2(50) NOT NULL,
    CHANGE_DATE DATE NOT NULL,
    FOREIGN KEY (CLASS_ID) REFERENCES ROOM_CLASSES(CLASS_ID)
);



WITH months AS (
  SELECT ADD_MONTHS(TRUNC(SYSDATE, 'YEAR'), LEVEL - 1) AS month_start
  FROM dual
  CONNECT BY LEVEL <= 12
),
datad AS (
  SELECT
    RC.CLASS_NAME,
    month_start,
    CEIL(COUNT(L.LICENSE_ID) * 1.1) AS FORECASTED_LICENSE_COUNT,
    L.LICENSE_COST * 1.1 AS LICENSE_COST_UP,
    ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 12) AS FORECAST_MONTH
  FROM
    months
  CROSS JOIN
    ROOM_CLASSES RC
  LEFT JOIN
    LICENSES L ON RC.USER_ID = L.USER_ID
  GROUP BY
    RC.CLASS_NAME, month_start, L.LICENSE_COST
)
SELECT
*
FROM
  datad
MODEL UNIQUE SINGLE REFERENCE
  DIMENSION BY (CLASS_NAME)
  MEASURES (FORECASTED_LICENSE_COUNT, FORECAST_MONTH, month_start)
  RULES  (
    FORECASTED_LICENSE_COUNT[ITERATION_NUMBER] = FORECASTED_LICENSE_COUNT[CV()]
  )
ORDER BY CLASS_NAME;


select  * from  USERS;


-----------------------------------
WITH data AS (
    SELECT
        s.NAME AS SOFTWARE_NAME,
        l.START_DATE,
        l.END_DATE,
        l.LICENSE_COST,
        ROW_NUMBER() OVER (PARTITION BY s.NAME ORDER BY l.START_DATE) AS period,
        LAG(l.LICENSE_COST) OVER (PARTITION BY s.NAME ORDER BY l.START_DATE) AS prev_license_cost,
        l.LICENSE_COST - LAG(l.LICENSE_COST) OVER (PARTITION BY s.NAME ORDER BY l.START_DATE) AS price_change
    FROM
        SOFTWARE s
    JOIN
        LICENSES l ON s.SOFTWARE_ID = l.SOFTWARE_ID
)
SELECT *
FROM data

MATCH_RECOGNIZE (
    PARTITION BY SOFTWARE_NAME
    ORDER BY START_DATE
    MEASURES
        FIRST(START_DATE) AS start_date,
        LAST(END_DATE) AS end_date
    ONE ROW PER MATCH
    PATTERN (FALL  GROWTH)
    DEFINE
        GROWTH AS (LICENSE_COST > PREV(LICENSE_COST, 1)),
        FALL AS (LICENSE_COST < PREV(LICENSE_COST))
);














select  * from USERS;
select  * from SOFTWARE;

INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES
(1, 1, TO_DATE('2023-01-01', 'YYYY-MM-DD'), TO_DATE('2023-06-01', 'YYYY-MM-DD'), 50.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES-- Начало низкой цены
(1, 1, TO_DATE('2023-06-02', 'YYYY-MM-DD'), TO_DATE('2023-12-01', 'YYYY-MM-DD'), 100.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES-- Увеличение цены
(1, 1, TO_DATE('2023-12-02', 'YYYY-MM-DD'), TO_DATE('2024-01-01', 'YYYY-MM-DD'), 80.00);
INSERT INTO LICENSES (SOFTWARE_ID, USER_ID, START_DATE, END_DATE, LICENSE_COST) VALUES-- Падение цены
(1, 1, TO_DATE('2024-01-02', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'), 120.00); -- Увеличение цены

