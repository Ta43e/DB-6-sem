CREATE TABLE USERS (
    USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USERNAME NVARCHAR2(50) NOT NULL UNIQUE,
    PASSWORD NVARCHAR2(50) NOT NULL,
    EMAIL NVARCHAR2(100) NOT NULL UNIQUE,
    DEVICE NVARCHAR2(50) NOT NULL,
    ROLE NVARCHAR2(50) NOT NULL
);

CREATE TABLE SOFTWARE (
    SOFTWARE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME NVARCHAR2(100) NOT NULL UNIQUE,
    VERSION NVARCHAR2(50) NOT NULL,
    VENDOR NVARCHAR2(100) NOT NULL,
    LICENSE_TYPE NVARCHAR2(50) NOT NULL,
    PreviousLevelID NUMBER, -- Предполагается, что это ссылка на предыдущую версию ПО
    FOREIGN KEY (PreviousLevelID) REFERENCES SOFTWARE (SOFTWARE_ID)
);

CREATE TABLE LICENSES (
    LICENSE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SOFTWARE_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    LICENSE_COST DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (SOFTWARE_ID) REFERENCES SOFTWARE(SOFTWARE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE ROOM_CLASSES (
    CLASS_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CLASS_NAME NVARCHAR2(50) NOT NULL UNIQUE,
    USER_ID INT NOT NULL, -- Добавлено поле для связи с таблицей USERS
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE CLASS_HISTORY (
    HISTORY_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CLASS_ID INTEGER NOT NULL,
    NEW_CLASS_NAME NVARCHAR2(50) NOT NULL,
    CHANGE_DATE DATE NOT NULL,
    FOREIGN KEY (CLASS_ID) REFERENCES ROOM_CLASSES(CLASS_ID)
);




CREATE OR REPLACE FUNCTION GetLicenseUsageData(
    p_start_date IN DATE,
    p_end_date IN DATE
)
RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT L.*, R.CLASS_NAME
    FROM LICENSES L
    INNER JOIN ROOM_CLASSES R ON L.USER_ID = R.USER_ID
    WHERE L.START_DATE >= p_start_date AND L.END_DATE <= p_end_date;

    RETURN v_cursor;
END;


DECLARE
    v_result_cursor SYS_REFCURSOR;
    v_license_id LICENSES.LICENSE_ID%TYPE;
    v_software_id LICENSES.SOFTWARE_ID%TYPE;
    v_user_id LICENSES.USER_ID%TYPE;
    v_start_date LICENSES.START_DATE%TYPE;
    v_end_date LICENSES.END_DATE%TYPE;
    v_license_cost LICENSES.LICENSE_COST%TYPE;
    v_class_name ROOM_CLASSES.CLASS_NAME%TYPE;
BEGIN
    -- Вызов функции
    v_result_cursor := GetLicenseUsageData(TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'));

    -- Извлечение данных из курсора
    LOOP
        FETCH v_result_cursor INTO v_license_id, v_software_id, v_user_id, v_start_date, v_end_date, v_license_cost, v_class_name;
        EXIT WHEN v_result_cursor%NOTFOUND;

        -- Используйте извлеченные данные по вашему усмотрению
        DBMS_OUTPUT.PUT_LINE('License ID: ' || v_license_id || ', Class Name: ' || v_class_name);
    END LOOP;

    -- Закрытие курсора
    CLOSE v_result_cursor;
END;
/


SET SERVEROUTPUT ON; -- Enable output from PL/SQL block

DECLARE
    v_result_cursor SYS_REFCURSOR;
    v_license_id LICENSES.LICENSE_ID%TYPE;
    v_software_id LICENSES.SOFTWARE_ID%TYPE;
    v_user_id LICENSES.USER_ID%TYPE;
    v_start_date LICENSES.START_DATE%TYPE;
    v_end_date LICENSES.END_DATE%TYPE;
    v_license_cost LICENSES.LICENSE_COST%TYPE;
    v_class_name ROOM_CLASSES.CLASS_NAME%TYPE;
    v_output_file UTL_FILE.FILE_TYPE; -- File handler
BEGIN
    -- Call the function and save the result in a cursor
    v_result_cursor := GetLicenseUsageData(TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'));

    -- Open the file for writing
    v_output_file := UTL_FILE.FOPEN('DIRECTORY_NAME', 'output_data.txt', 'W'); -- Replace 'DIRECTORY_NAME' with your directory name

    -- Loop through the cursor and write data to the file
    LOOP
        FETCH v_result_cursor INTO v_license_id, v_software_id, v_user_id, v_start_date, v_end_date, v_license_cost, v_class_name;
        EXIT WHEN v_result_cursor%NOTFOUND;

        -- Write data to the file
        UTL_FILE.PUT_LINE(v_output_file, 'License ID: ' || v_license_id || ', Class Name: ' || v_class_name);
    END LOOP;

    -- Close the cursor
    CLOSE v_result_cursor;

    -- Close the file
    UTL_FILE.FCLOSE(v_output_file);

    -- Output success message
    DBMS_OUTPUT.PUT_LINE('Data exported successfully.');
END;
/
